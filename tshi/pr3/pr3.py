import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import LabeledPrice, PreCheckoutQuery, Message
import asyncio
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv('TOKEN')
PAYMENT_TOKEN = os.getenv('PAYMENT_TOKEN')  # Move payment token to .env

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Product catalog
PRODUCTS = {
    'cat_food_premium': {
        'title': 'Premium Cat Food',
        'description': 'Premium quality cat food with salmon (2kg)',
        'price': 2500,  # $25.00
        'photo_url': 'https://example.com/cat_food.jpg',
    },
    'dog_food_premium': {
        'title': 'Premium Dog Food',
        'description': 'Premium quality dog food with beef (3kg)',
        'price': 3000,  # $30.00
        'photo_url': 'https://example.com/dog_food.jpg',
    },
    'small_pet_food': {
        'title': 'Small Pet Food Mix',
        'description': 'Special mix for small pets (1kg)',
        'price': 1500,  # $15.00
        'photo_url': 'https://example.com/small_pet_food.jpg',
    }
}

def get_main_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(text='üõç –ö–∞—Ç–∞–ª–æ–≥'),
                types.KeyboardButton(text='üõí –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
            ],
            [
                types.KeyboardButton(text='‚ÑπÔ∏è –ü—Ä–æ –º–∞–≥–∞–∑–∏–Ω'),
                types.KeyboardButton(text='üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏')
            ],
            [types.KeyboardButton(text='üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞')]
        ],
        resize_keyboard=True,
        input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é"
    )

def get_catalog_keyboard():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text='üê± Premium Cat Food - $25',
                    callback_data='buy_cat_food_premium'
                )
            ],
            [
                types.InlineKeyboardButton(
                    text='üêï Premium Dog Food - $30',
                    callback_data='buy_dog_food_premium'
                )
            ],
            [
                types.InlineKeyboardButton(
                    text='üêπ Small Pet Food Mix - $15',
                    callback_data='buy_small_pet_food'
                )
            ]
        ]
    )

@dp.message(Command('start'))
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Pet Food Store!\n\n"
        "üî∏ –ü—Ä–µ–º—ñ—É–º –∫–æ—Ä–º–∏ –¥–ª—è –≤–∞—à–∏—Ö —É–ª—é–±–ª–µ–Ω—Ü—ñ–≤\n"
        "üî∏ –ë–µ–∑–ø–µ—á–Ω–∞ –æ–ø–ª–∞—Ç–∞\n"
        "üî∏ –®–≤–∏–¥–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –≤ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )

@dp.message(F.text == 'üõç –ö–∞—Ç–∞–ª–æ–≥')
async def show_catalog(message: types.Message):
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –∑ –Ω–∞—à–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥—É:",
        reply_markup=get_catalog_keyboard()
    )

@dp.callback_query(F.data.startswith('buy_'))
async def process_buy(callback: types.CallbackQuery):
    product_id = callback.data.replace('buy_', '')
    product = PRODUCTS.get(product_id)
    
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    await bot.send_invoice(
        chat_id=callback.message.chat.id,
        title=product['title'],
        description=product['description'],
        payload=product_id,
        provider_token=PAYMENT_TOKEN,
        currency='USD',
        prices=[
            LabeledPrice(
                label=product['title'],
                amount=product['price']
            )
        ],
        photo_url=product['photo_url'],
        photo_height=512,
        photo_width=512,
        photo_size=512,
        need_shipping_address=True,
        need_phone_number=True,
        protect_content=False
    )
    await callback.answer()

@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(F.successful_payment)
async def process_successful_payment(message: Message):
    total_amount = message.successful_payment.total_amount // 100
    currency = message.successful_payment.currency
    
    await message.answer(
        f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
        f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {total_amount} {currency}\n"
        f"üöö –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n"
        f"üì¶ –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {message.successful_payment.invoice_payload}"
    )

@dp.message(F.text == '‚ÑπÔ∏è –ü—Ä–æ –º–∞–≥–∞–∑–∏–Ω')
async def about_store(message: types.Message):
    await message.answer(
        "üè™ Pet Food Store - –≤–∞—à –Ω–∞–¥—ñ–π–Ω–∏–π –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫ –∫–æ—Ä–º—ñ–≤!\n\n"
        "üèÜ –û—Ñ—ñ—Ü—ñ–π–Ω–∏–π –¥–∏—Å—Ç—Ä–∏–±'—é—Ç–æ—Ä –ø—Ä–µ–º—ñ—É–º –±—Ä–µ–Ω–¥—ñ–≤\n"
        "‚úÖ –ì–∞—Ä–∞–Ω—Ç—ñ—è —è–∫–æ—Å—Ç—ñ\n"
        "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å—ñ–π –∫—Ä–∞—ó–Ω—ñ\n"
        "üíØ –¢–∏—Å—è—á—ñ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤"
    )

@dp.message(F.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏')
async def contacts(message: types.Message):
    await message.answer(
        "üìû –ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏:\n\n"
        "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: +380XXXXXXXXX\n"
        "üìß Email: support@petfoodstore.com\n"
        "üåê –í–µ–±-—Å–∞–π—Ç: www.petfoodstore.com\n"
        "üìç –ê–¥—Ä–µ—Å–∞: –≤—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞, 123"
    )

@dp.message(F.text == 'üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞')
async def support(message: types.Message):
    await message.answer(
        "–°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø—Ä–∞—Ü—é—î 24/7\n\n"
        "üìû –ì–∞—Ä—è—á–∞ –ª—ñ–Ω—ñ—è: 0800 XXX XXX\n"
        "üíå Email: help@petfoodstore.com\n\n"
        "–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: 15 —Ö–≤–∏–ª–∏–Ω"
    )

@dp.message(F.text == 'üõí –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
async def my_orders(message: types.Message):
    await message.answer(
        "–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å:\n\n"
        "1Ô∏è‚É£ –í—ñ–¥–≤—ñ–¥–∞–π—Ç–µ –Ω–∞—à –≤–µ–±-—Å–∞–π—Ç\n"
        "2Ô∏è‚É£ –£–≤—ñ–π–¥—ñ—Ç—å –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É —Ä–æ–∑–¥—ñ–ª '–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'"
    )

if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))
